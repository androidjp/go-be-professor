// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package expert

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	anypb "google.golang.org/protobuf/types/known/anypb"
	errs "kdemo/kitex_gen/biz/model/errs"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *HelloReqBody) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HelloReqBody[number], err)
}

func (x *HelloReqBody) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HelloRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HelloRes[number], err)
}

func (x *HelloRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuestionSearchReqBody[number], err)
}

func (x *QuestionSearchReqBody) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Request, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Readability, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ReturnFormat, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CustomExt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.WithFavicon, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Urls = append(x.Urls, v)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EnableImageCache, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.WithReExtractor, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.WithReAdapter, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchReqBody) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Nocache, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *QuestionSearchRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QuestionSearchRes[number], err)
}

func (x *QuestionSearchRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CrawlResInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ResInfos = append(x.ResInfos, &v)
	return offset, nil
}

func (x *QuestionSearchRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.TotalUrls, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuestionSearchRes) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.SuccessUrls, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QuestionSearchRes) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FailureUrls, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CrawlResInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CrawlResInfo[number], err)
}

func (x *CrawlResInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Code = Biz_Code(v)
	return offset, nil
}

func (x *CrawlResInfo) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.DestUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Content, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v CrawlResInfo_Resource
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Resources = append(x.Resources, &v)
	return offset, nil
}

func (x *CrawlResInfo) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v CrawlResInfo_Metadata
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Metadata = &v
	return offset, nil
}

func (x *CrawlResInfo) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CrawlResInfo_Resource[number], err)
}

func (x *CrawlResInfo_Resource) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Key, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ObjectKey, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Src, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Alt, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.OriginSrc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Resource) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ExportSrc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Metadata) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CrawlResInfo_Metadata[number], err)
}

func (x *CrawlResInfo_Metadata) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CrawlResInfo_Metadata) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Favicon, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HelloReqBody) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *HelloReqBody) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *HelloRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *HelloRes) fastWriteField1(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMessage())
	return offset
}

func (x *QuestionSearchReqBody) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField2(buf []byte) (offset int) {
	if x.Request == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRequest())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField3(buf []byte) (offset int) {
	if !x.Readability {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetReadability())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField4(buf []byte) (offset int) {
	if x.ReturnFormat == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetReturnFormat())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField5(buf []byte) (offset int) {
	if x.CustomExt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCustomExt())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField6(buf []byte) (offset int) {
	if !x.WithFavicon {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetWithFavicon())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField7(buf []byte) (offset int) {
	if len(x.Urls) == 0 {
		return offset
	}
	for i := range x.GetUrls() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetUrls()[i])
	}
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField8(buf []byte) (offset int) {
	if !x.EnableImageCache {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 8, x.GetEnableImageCache())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField9(buf []byte) (offset int) {
	if !x.WithReExtractor {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 9, x.GetWithReExtractor())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField10(buf []byte) (offset int) {
	if !x.WithReAdapter {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetWithReAdapter())
	return offset
}

func (x *QuestionSearchReqBody) fastWriteField11(buf []byte) (offset int) {
	if !x.Nocache {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 11, x.GetNocache())
	return offset
}

func (x *QuestionSearchRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *QuestionSearchRes) fastWriteField1(buf []byte) (offset int) {
	if x.ResInfos == nil {
		return offset
	}
	for i := range x.GetResInfos() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetResInfos()[i])
	}
	return offset
}

func (x *QuestionSearchRes) fastWriteField2(buf []byte) (offset int) {
	if x.TotalUrls == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotalUrls())
	return offset
}

func (x *QuestionSearchRes) fastWriteField3(buf []byte) (offset int) {
	if x.SuccessUrls == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetSuccessUrls())
	return offset
}

func (x *QuestionSearchRes) fastWriteField4(buf []byte) (offset int) {
	if x.FailureUrls == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetFailureUrls())
	return offset
}

func (x *CrawlResInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *CrawlResInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCode()))
	return offset
}

func (x *CrawlResInfo) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *CrawlResInfo) fastWriteField3(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUrl())
	return offset
}

func (x *CrawlResInfo) fastWriteField4(buf []byte) (offset int) {
	if x.DestUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDestUrl())
	return offset
}

func (x *CrawlResInfo) fastWriteField5(buf []byte) (offset int) {
	if x.Content == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetContent())
	return offset
}

func (x *CrawlResInfo) fastWriteField6(buf []byte) (offset int) {
	if x.Resources == nil {
		return offset
	}
	for i := range x.GetResources() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetResources()[i])
	}
	return offset
}

func (x *CrawlResInfo) fastWriteField7(buf []byte) (offset int) {
	if x.Metadata == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 7, x.GetMetadata())
	return offset
}

func (x *CrawlResInfo) fastWriteField8(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetStatus())
	return offset
}

func (x *CrawlResInfo_Resource) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField1(buf []byte) (offset int) {
	if x.Key == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKey())
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField2(buf []byte) (offset int) {
	if x.ObjectKey == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetObjectKey())
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField3(buf []byte) (offset int) {
	if x.Src == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetSrc())
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField4(buf []byte) (offset int) {
	if x.Alt == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAlt())
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField5(buf []byte) (offset int) {
	if x.OriginSrc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOriginSrc())
	return offset
}

func (x *CrawlResInfo_Resource) fastWriteField6(buf []byte) (offset int) {
	if x.ExportSrc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetExportSrc())
	return offset
}

func (x *CrawlResInfo_Metadata) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CrawlResInfo_Metadata) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *CrawlResInfo_Metadata) fastWriteField2(buf []byte) (offset int) {
	if x.Favicon == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFavicon())
	return offset
}

func (x *HelloReqBody) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *HelloReqBody) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *HelloRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *HelloRes) sizeField1() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMessage())
	return n
}

func (x *QuestionSearchReqBody) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *QuestionSearchReqBody) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *QuestionSearchReqBody) sizeField2() (n int) {
	if x.Request == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRequest())
	return n
}

func (x *QuestionSearchReqBody) sizeField3() (n int) {
	if !x.Readability {
		return n
	}
	n += fastpb.SizeBool(3, x.GetReadability())
	return n
}

func (x *QuestionSearchReqBody) sizeField4() (n int) {
	if x.ReturnFormat == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetReturnFormat())
	return n
}

func (x *QuestionSearchReqBody) sizeField5() (n int) {
	if x.CustomExt == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCustomExt())
	return n
}

func (x *QuestionSearchReqBody) sizeField6() (n int) {
	if !x.WithFavicon {
		return n
	}
	n += fastpb.SizeBool(6, x.GetWithFavicon())
	return n
}

func (x *QuestionSearchReqBody) sizeField7() (n int) {
	if len(x.Urls) == 0 {
		return n
	}
	for i := range x.GetUrls() {
		n += fastpb.SizeString(7, x.GetUrls()[i])
	}
	return n
}

func (x *QuestionSearchReqBody) sizeField8() (n int) {
	if !x.EnableImageCache {
		return n
	}
	n += fastpb.SizeBool(8, x.GetEnableImageCache())
	return n
}

func (x *QuestionSearchReqBody) sizeField9() (n int) {
	if !x.WithReExtractor {
		return n
	}
	n += fastpb.SizeBool(9, x.GetWithReExtractor())
	return n
}

func (x *QuestionSearchReqBody) sizeField10() (n int) {
	if !x.WithReAdapter {
		return n
	}
	n += fastpb.SizeBool(10, x.GetWithReAdapter())
	return n
}

func (x *QuestionSearchReqBody) sizeField11() (n int) {
	if !x.Nocache {
		return n
	}
	n += fastpb.SizeBool(11, x.GetNocache())
	return n
}

func (x *QuestionSearchRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *QuestionSearchRes) sizeField1() (n int) {
	if x.ResInfos == nil {
		return n
	}
	for i := range x.GetResInfos() {
		n += fastpb.SizeMessage(1, x.GetResInfos()[i])
	}
	return n
}

func (x *QuestionSearchRes) sizeField2() (n int) {
	if x.TotalUrls == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotalUrls())
	return n
}

func (x *QuestionSearchRes) sizeField3() (n int) {
	if x.SuccessUrls == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetSuccessUrls())
	return n
}

func (x *QuestionSearchRes) sizeField4() (n int) {
	if x.FailureUrls == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetFailureUrls())
	return n
}

func (x *CrawlResInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *CrawlResInfo) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCode()))
	return n
}

func (x *CrawlResInfo) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *CrawlResInfo) sizeField3() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUrl())
	return n
}

func (x *CrawlResInfo) sizeField4() (n int) {
	if x.DestUrl == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDestUrl())
	return n
}

func (x *CrawlResInfo) sizeField5() (n int) {
	if x.Content == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetContent())
	return n
}

func (x *CrawlResInfo) sizeField6() (n int) {
	if x.Resources == nil {
		return n
	}
	for i := range x.GetResources() {
		n += fastpb.SizeMessage(6, x.GetResources()[i])
	}
	return n
}

func (x *CrawlResInfo) sizeField7() (n int) {
	if x.Metadata == nil {
		return n
	}
	n += fastpb.SizeMessage(7, x.GetMetadata())
	return n
}

func (x *CrawlResInfo) sizeField8() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetStatus())
	return n
}

func (x *CrawlResInfo_Resource) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *CrawlResInfo_Resource) sizeField1() (n int) {
	if x.Key == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKey())
	return n
}

func (x *CrawlResInfo_Resource) sizeField2() (n int) {
	if x.ObjectKey == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetObjectKey())
	return n
}

func (x *CrawlResInfo_Resource) sizeField3() (n int) {
	if x.Src == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetSrc())
	return n
}

func (x *CrawlResInfo_Resource) sizeField4() (n int) {
	if x.Alt == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAlt())
	return n
}

func (x *CrawlResInfo_Resource) sizeField5() (n int) {
	if x.OriginSrc == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetOriginSrc())
	return n
}

func (x *CrawlResInfo_Resource) sizeField6() (n int) {
	if x.ExportSrc == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetExportSrc())
	return n
}

func (x *CrawlResInfo_Metadata) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CrawlResInfo_Metadata) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *CrawlResInfo_Metadata) sizeField2() (n int) {
	if x.Favicon == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFavicon())
	return n
}

var fieldIDToName_HelloReqBody = map[int32]string{
	1: "Name",
}

var fieldIDToName_HelloRes = map[int32]string{
	1: "Message",
}

var fieldIDToName_QuestionSearchReqBody = map[int32]string{
	1:  "Url",
	2:  "Request",
	3:  "Readability",
	4:  "ReturnFormat",
	5:  "CustomExt",
	6:  "WithFavicon",
	7:  "Urls",
	8:  "EnableImageCache",
	9:  "WithReExtractor",
	10: "WithReAdapter",
	11: "Nocache",
}

var fieldIDToName_QuestionSearchRes = map[int32]string{
	1: "ResInfos",
	2: "TotalUrls",
	3: "SuccessUrls",
	4: "FailureUrls",
}

var fieldIDToName_CrawlResInfo = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Url",
	4: "DestUrl",
	5: "Content",
	6: "Resources",
	7: "Metadata",
	8: "Status",
}

var fieldIDToName_CrawlResInfo_Resource = map[int32]string{
	1: "Key",
	2: "ObjectKey",
	3: "Src",
	4: "Alt",
	5: "OriginSrc",
	6: "ExportSrc",
}

var fieldIDToName_CrawlResInfo_Metadata = map[int32]string{
	1: "Title",
	2: "Favicon",
}

var _ = anypb.File_google_protobuf_any_proto
var _ = errs.File_idl_errs_biz_code_proto
