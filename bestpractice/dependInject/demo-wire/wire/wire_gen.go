// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"demo-wire/handler"
	"demo-wire/ioc"
	"demo-wire/service"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

/*
InitializeApp 函数就是一个注入器，
函数内部通过 wire.Build 函数连接所有的提供者，然后返回 &gin.Engine{}，
该返回值实际上并没有使用到，只是为了满足编译器的要求，避免报错而已，真正的返回值来自 ioc.NewGinEngineAndRegisterRoute
*/
func InitializeApp() *gin.Engine {
	iPostService := service.NewPostService()
	postHandler := handler.NewPostHandler(iPostService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

// v2优化版本，使用提供者分组wireSet
func InitializeAppV2() *gin.Engine {
	iPostService := service.NewPostService()
	postHandler := handler.NewPostHandler(iPostService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

// v3优化版本，建立接口和实现类的关系
func InitializeAppV3() *gin.Engine {
	postService := service.NewPostServiceV3()
	postHandler := handler.NewPostHandler(postService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}

// 值表达式 + 接口类型使用
func InjectPostService() service.IPostService {
	iPostService := _wirePostServiceValue
	return iPostService
}

var (
	_wirePostServiceValue = &service.PostService{}
)

// v4, 备注注入器语法
func InitializeGin() *gin.Engine {
	postService := service.NewPostServiceV3()
	postHandler := handler.NewPostHandler(postService)
	engine := ioc.NewGinEngineAndRegisterRoute(postHandler)
	return engine
}
